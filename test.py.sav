import unittest
import tempfile
import os
from pathlib import Path

from functions.functions import (
        get_files_info,
        get_file_content,
        write_file,
    )

class TestGetFilesInfo(unittest.TestCase):
 
    def test_directory_none(self):
        """Test that passing "None" as directory equates to working directory"""
        expected = ["- tests.py: file_size=1343 bytes, is_dir=False",
                    "- main.py: file_size=576 bytes, is_dir=False",
                    "- pkg: file_size=160 bytes, is_dir=True"
                    ]

        actual = get_files_info("calculator")

        for expected_result in expected:
            self.assertTrue(expected_result in actual)

    def test_directory_dot(self):
        """Test that passing "." as directory equates to working directory"""

        expected = ["- tests.py: file_size=1343 bytes, is_dir=False",
                    "- main.py: file_size=576 bytes, is_dir=False",
                    "- pkg: file_size=160 bytes, is_dir=True"
                    ]

        actual = get_files_info("calculator", ".")

        for expected_result in expected:
            self.assertTrue(expected_result in actual)

    def test_directory_valid_subdirectory(self):
        """Test that passing "pkg" as valid subdirectory works as expected"""

        expected = ["- calculator.py: file_size=1738 bytes, is_dir=False",
                    "- render.py: file_size=767 bytes, is_dir=False",
                    "- __pycache__: file_size=128 bytes, is_dir=True"
                    ]

        actual = get_files_info("calculator", "pkg")

        for expected_result in expected:
            self.assertTrue(expected_result in actual)

    def test_directory_invalid_dotdot(self):
        """Test that passing "../" results in error message""" 

        expected = ['Error: Cannot list "../" as it is outside the permitted working directory']

        actual = get_files_info("calculator", "../")

        for expected_result in expected:
            self.assertTrue(expected_result in actual)

    def test_directory_invalid_rootbin(self):
        """Test that passing "/bin" results in error message""" 

        expected = ['Error: Cannot list "/bin" as it is outside the permitted working directory']

        actual = get_files_info("calculator", "/bin")

        for expected_result in expected:
            self.assertTrue(expected_result in actual)

    def test_file_as_directory_fails(self):
        """Test that passing in non-directory file results in error message"""

        expected = ['Error: "tests.py" is not a directory']

        actual = get_files_info("calculator", "tests.py")

        for expected_result in expected:
            self.assertTrue(expected_result in actual)


class TestGetFileContent(unittest.TestCase):
    
    def test_file_none(self):
        """Test that passing "" as file_path equates returns error"""
        expected = ['Error: File not found or is not a regular file: ""']

        actual = get_file_content("calculator", "")

        print(actual)

        for expected_result in expected:
            self.assertTrue(expected_result in actual)

    def test_file_directory(self):
        """Test that passing directory as file_path equates returns error"""
        expected = ['Error: File not found or is not a regular file: "pkg"']

        actual = get_file_content("calculator", "pkg")

        print(actual)

        for expected_result in expected:
            self.assertTrue(expected_result in actual)

    def test_file_main(self):
        expected = ['def main():']

        actual = get_file_content("calculator", "main.py")

        for expected_result in expected:
            self.assertTrue(expected_result in actual)

    def test_file_subdir_file(self):
        expected = ['def _apply_operator(self, operators, values)']

        actual = get_file_content("calculator", "pkg/calculator.py")

        for expected_result in expected:
            self.assertTrue(expected_result in actual)

    def test_file_outside_workingdir(self):
        expected = ['Error:']

        actual = get_file_content("calculator", "/bin/cat")

        for expected_result in expected:
            self.assertTrue(expected_result in actual)

class TestWriteFile(unittest.TestCase):
    
    def test_file_none(self):
        """Test that passing "" as file_path equates returns error"""
        expected = ['Error: File not found or is not a regular file: ""']

        actual = write_file("calculator", "", "some content")

        print(actual)

        for expected_result in expected:
            self.assertTrue(expected_result in actual)
if __name__ == '__main__':
    unittest.main()
